// <auto-generated />
using System;
using Ecommerce.Infrastructure.DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.Migrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Domian.CartAggregate.Entities.Product", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("T_Products", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("2b6800f7-dbdb-4dfe-b35f-df0eebeddf5f"),
                            Balance = 100,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Product 1",
                            Price = 100m
                        },
                        new
                        {
                            ID = new Guid("cc9c70c8-657f-4bbc-bcc8-642264dce8eb"),
                            Balance = 100,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Product 2",
                            Price = 100m
                        },
                        new
                        {
                            ID = new Guid("aa95fcd2-631f-4d56-a861-2ec4a38f3898"),
                            Balance = 100,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Product 3",
                            Price = 100m
                        });
                });

            modelBuilder.Entity("Ecommerce.Domian.OrderAggregate.Order", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("T_Orders", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domian.OrderAggregate.Order", b =>
                {
                    b.OwnsMany("Ecommerce.Domian.OrderAggregate.Entities.OrderDetail", "Details", b1 =>
                        {
                            b1.Property<Guid>("ID")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<Guid>("CreatedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<Guid>("LastModifiedBy")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("OrderID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Price")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<Guid>("ProductID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Qty")
                                .HasColumnType("int");

                            b1.HasKey("ID");

                            b1.HasIndex("OrderID");

                            b1.HasIndex("ProductID");

                            b1.ToTable("T_OrderItems", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OrderID");

                            b1.HasOne("Ecommerce.Domian.CartAggregate.Entities.Product", "Product")
                                .WithMany()
                                .HasForeignKey("ProductID")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Product");
                        });

                    b.OwnsOne("Ecommerce.Domian.OrderAggregate.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("OrderID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Building")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Building");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("FlatNo")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FlatNo");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Street");

                            b1.HasKey("OrderID");

                            b1.ToTable("T_Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderID");
                        });

                    b.OwnsOne("Ecommerce.Domian.OrderAggregate.ValueObjects.PaymentData", "PaymentData", b1 =>
                        {
                            b1.Property<Guid>("OrderID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("InvoiceNumber")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("InvoiceNumber");

                            b1.Property<DateTime?>("PaymentDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("PaymentDate");

                            b1.Property<string>("PaymentRefernce")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PaymentRefernce");

                            b1.Property<decimal?>("RecievedAmount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("RecievedAmount");

                            b1.HasKey("OrderID");

                            b1.ToTable("T_Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderID");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Details");

                    b.Navigation("PaymentData")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
